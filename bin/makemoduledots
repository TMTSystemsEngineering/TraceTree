#! /usr/bin/perl
# License Terms
# 
# Copyright (c) 2006,2007,2008,2009,2010,2011,2012,2013, California 
# Institute of Technology ("Caltech").  U.S. Government sponsorship 
# acknowledged. 
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# 
# 
# *   Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# *   Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in the 
#     documentation and/or other materials provided with the distribution.
# 
# *   Neither the name of Caltech nor its operating division, the Jet 
#     Propulsion Laboratory, nor the names of its contributors may be used 
#     to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
use File::Path ;
require "fileutils.pl" ;
require "miscutils.pl" ;
require "wrap.pl" ;
require "tt_projuniq.pl" ;

$TIMELY = 0 ;
$UNTIMELY = 1 ;
$CERTAIN = 0 ;
$UNCERTAIN = 1 ;

# This program makes up for distinct lack in DOORS: can't detect source
# links unless source module is open.  But we needed to avoid opening all
# modules.
$rootpathname = "ttr" ;
if (@ARGV) 
{ 
  $pname = $ARGV[0] ;
  $rootdirname = "$rootpathname/$pname" ;
  $modulename = $ARGV[1] ;
}
else { die "Usage:\n  makemoduledots projectname modulename\n" ; }
print "$0: doing $rootdirname $modulename\n" ;

$moduledotpathname = "moduledots/$pname" . "Traces" ;
print "Creating (if needed) '$moduledotpathname'\n" ;
mkpath ($moduledotpathname) ;

$dotfilename = "$modulename.dot" ;
$dotfilename =~ s/\//___/g ;
$dotpathname = $moduledotpathname . "/" . $dotfilename ;

print "$0: opening '$dotpathname'\n" ;
open DOT, "> $dotpathname" 
    or die "Couldn't open $dotpathname for writing: $!\n" ;
print DOT "digraph $thisdotname\{\n  rankdir=LR\n" ;

$logfilename = "LogsAndData/$pname.makemoduledots.out" ;
open LOG, "> $logfilename" or 
    warn "Couldn't open $logfilename for writing: $!\n" ;
print "$0: opened log file $logfilename\n" ;
%logrecords = () ;   # don't really need this, but...

# @lnklist = getfilelistrecursive ($rootdirname, "\\.lnks\$") ;
# $nlnks = scalar @lnklist ;

########################################################################
# Here we read in all the link information and make linked lists       #
# internally.                                                          #
########################################################################
$alllinkfilename = "$rootdirname/alllinks.txt" ;
open ALL, $alllinkfilename
    or die "Couldn't open $alllinkfilename for reading: $!\n" ;
    
$count = 0 ;

while (<ALL>)
{
  chomp ;
  # three possibilities:
  # /MSL/MS_Elements/IPE    198     t       /MSL/MS 507
  # /MSL/MS_Elements/IPE    199     CreateModDate   2006-12-21 11:38:24
  # /MSL/MS_Elements/IPE    201     ModuleBaseline  2005-09-07 08:07:50
  ($thisdirname, $thisabsno, $s2, $s3, $s4) = split /\t/ ;
  $thisnodename = "$thisdirname/$thisabsno" ;
  $thisnodename =~ s/^\/$pname\/// ;   # get rid of /pname/ at front
  $thisnoderef = createnewnode ($thisnodename) ; # conditional create
  if ($s2 eq "t")   # then it's a link
  {
    $tgtnodename = "$s3/$s4" ;
    $tgtnodename =~ s/^\/$pname\/// ;   # get rid of /pname/ at front
    $tgtnoderef = createnewnode ($tgtnodename) ; # conditional create
    
    ################################################################
	#     We make the nodes, but if 'this' and 'tgt' are the same  #
	#     node, we don't link but do print an error.               #
    ################################################################
    if ($thisnodename ne $tgtnodename)
    {
      addtargetto ($thisnoderef, $tgtnoderef) ;
    }
    else
    {
      print LOG "DETECTED LINK TO SELF, ignoring: '$thisnodename'\n" ;
    }
  }
  else   # it must be a date
  {
# print "for datemodtype, thisnodename = $thisnodename\n" ;
    $datemodtype{$thisnodename} = $s2 ;
    $datemod{$thisnodename} = $s3 ;
  }
}

print LOG "scalar of keys of noderefs = " . (scalar (keys %noderefs)) . "\n" ;
print LOG "scalar of keys of datemodtype = " . (scalar (keys %datemodtype)) . "\n" ;
print LOG "tocountlinks = $tocountlinks\n" ;
print LOG "fromcountlinks = $fromcountlinks\n" ;

########################################################################
# Just read in all the object texts and short texts once.  Otherwise   #
# every time a node is linked to by some other, no matter how far      #
# away, we read these two files again.                                 #
########################################################################
$ntodo = scalar keys %datemodtype ;
foreach $nodename (sort keys %datemodtype)
{
  $perttxtfilename = "$rootdirname/$nodename.perttxt" ;
  ($objtxt, $shrttxt, $projidtxt, $vaptxt) 
      = getpertinenttxt ($perttxtfilename) ;

  $objtxt{$nodename} = $objtxt;
  $shrttxt{$nodename} = $shrttxt if $shrttxt ne '' ;
  $ndone++ ;
  print STDERR "$0: done reading $ndone of $ntodo\r" 
      if $ndone%50 == 0 ;
}
print STDERR "$0: done reading $ndone of $ntodo\n"  ;

########################################################################
# Now we write the dot file.                                           #
########################################################################
$ndone = 0 ; 
$nloops = 0 ;
foreach $nodename (sort keys %datemodtype)
{
  ($thismodname = $nodename) =~ s/\/\d+$// ;
  next unless $thismodname eq $modulename ;
  warn "NOT DEFINED $nodename" if !defined $nodename ;
  $xmlfilename = "$rootdirname/$nodename.xml" ;
  next unless isObjectToDo ($xmlfilename) ;

  $thisnodelabel = makenodelabel ($nodename) ;
  $thisdotname = makedotname ($nodename) ;
  
  if (defined $noderefs{$nodename})
  {
    undef %traces ;
    undef %nodes ;
    undef %fillcolor ;
    undef %linecolor ;
    $noderef = $noderefs{$nodename} ;
    $nodes{$nodename}++ ;
    $thisdatemodtype = $datemodtype{$nodename} ;
    $thisdatemod = $datemod{$nodename} ;
    $srclistref = $noderef->[0] ;
    $tgtlistref = $noderef->[1] ;
    $nsrcs = scalar (@$srclistref) ;
    $ntgts = scalar (@$tgtlistref) ;
    traceup ("  ", $nodename) ;
    tracedown ("  ", $nodename) ;

    # print STDERR "doing $nodename\n" ;
    foreach $nodenameinnode (sort keys %nodes)
    {
      $nodelabel = makenodelabel ($nodenameinnode) ;
      $nodelabeltoprint = $nodelabel ;   # this is clumsy! to do with 
                                         # nodenameinnode, 
                                         # thisnodelabel, etc. 
      if (defined $shrttxt{$nodenameinnode})
      {
        $nodelabeltoprint .= "\\n" . $shrttxt{$nodenameinnode}  ;
      }
      else
      {
      }

      $dotname = makedotname ($nodenameinnode) ;
      $dotline = "  $dotname [" ;
#      print DOT "fontsize=$fontsize, " ;
      $dotline .= "label=\"$nodelabeltoprint\", shape=box, style=filled, " ;
#      print DOT "URL=\"$relhtmlfilename\", " ;
      if ($thisnodelabel eq $nodelabel)  # is this the subject node?
      {
        $fillcolor = "yellow" ; 
        $linecolor = ($thisdatemodtype eq "ModuleBaseline") ? "red" : "black" ;
      }
      else # it's one of the linked nodes
      {
        $fillcolor = $fillcolor{$nodenameinnode} ;
        $linecolor = $linecolor{$nodenameinnode} ;
      }
      $dotline .=  "fillcolor=$fillcolor, color=$linecolor" ;
      if (defined $objtxt{$nodenameinnode})
      {
        $dotline .=  ", tooltip=\"" . $objtxt{$nodenameinnode} . "\"";
      }
      $dotline .=  "];\n" ;
      $dotlines{$dotline}++ ;
    }
    foreach $trace (sort keys %traces)
    {
      $tracelines{"  $trace ;\n"}++ ;
    }
  }
  $ndone++ ;
  print STDERR "$0: done writing $ndone of $ntodo\r" 
      if $ndone%50 == 0 ;
}

foreach $dotline (sort keys %dotlines)
{
  print DOT $dotline ;
}
foreach $traceline (sort keys %tracelines)
{
  print DOT $traceline ;
}
print DOT "}\n" ;
close DOT ;
print STDERR "$0: done writing $ndone of $ntodo\n"  ;
print STDERR "$0: $rootdirname had $nloops loops\n" ;
print LOG  "$rootdirname had $nloops loops\n" ;

($htmlfilename = $dotfilename) =~ s/dot$/html/ ;
($htmlpathname = $dotpathname) =~ s/dot$/html/ ;
($giffilename = $dotfilename) =~ s/dot$/gif/ ;
($gifpathname = $dotpathname) =~ s/dot$/gif/ ;
($mapfilename = $dotfilename) =~ s/dot$/map/ ;
($mappathname = $dotpathname) =~ s/dot$/map/ ;

$dotcmd 
  = "dot -Nfontsize=8 -Nfontname=helvetica -Tcmapx -o$mappathname -Tgif -o$gifpathname $dotpathname" ;
print "doing '$dotcmd'\n" ;
system $dotcmd ;
# CHECK RESULT HERE BOZO

open H, "> $htmlpathname"
    or die "Couldn't open $htmlpathname for writing: $!\n" ;
$htmlstart =<<EOHTMLSTART;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head><title>MODULENAME</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  </head>
  <body>
  <h2>MODULENAME</h2>
  <p>All links to/from MODULENAME<br>
  Hover over blocks to see text of requirements.<br>
  Yellow blocks are members of this module<br>
  <b>Includes only</b> DOORS objects from section 3 and later<br>
  <b>Excludes</b> section headers and DOORS table elements.</p>
<img src="GIFFILENAME" usemap="_anonymous_0" />
EOHTMLSTART

$htmlstart =~ s/MODULENAME/$modulename/g ;
$htmlstart =~ s/GIFFILENAME/$giffilename/g ;  # use file, not path: it's 
                                              # relative 
print H $htmlstart ;

open M, "$mappathname"
    or die "Couldn't open $mappathname for reading: $!\n" ;
while (<M>)
{
  print H ;
}
close M ;
print H "<body>\n</html>\n" ;
close H ;



sub traceup
{
  my ($indent, $nodename) = @_ ;
  my ($noderef, $srclistref, $srcref, $srcname) ;
  my ($srcdotname, $dotname) ;
  my ($srcdatemodtype, $srcdatemod) ;

  return if !defined $nodename ;
  $noderef = $noderefs{$nodename} ;
  $dotname = makedotname ($nodename) ;
  $srclistref = $noderef->[0] ;
  foreach $srcref (@$srclistref)
  {
    $srcname = $nameof{$srcref} ;
    $srcdatemodtype = $datemodtype{$srcname} ;
    $srcdatemod = $datemod{$srcname} ;
    if (!defined $srcdatemodtype)
    {
      print LOG 
          "$nodename points to $srcname, which isn't defined - deleted?\n" ;
    }
    else
    {
      # gt - stringwise greater than - indicates later than
      $timeliness = ($srcdatemod gt $thisdatemod) ? $UNTIMELY : $TIMELY ;
      $certainty 
          = ($srcdatemodtype eq "ModuleBaseline") ? $UNCERTAIN : $CERTAIN ;
      ##################################################################
      # For trace up, if it's timely it's OK, no matter than           #
      # uncertainty, because uncertainty can only make it earlier.     #
      # But if it's untimely AND uncertain, we make it pink, because   #
      # the uncertainty could bring it back to timeliness.             #
      ##################################################################
      if ($timeliness == $TIMELY) 
      { 
	$fillcolor = "lightblue" ;
        $linecolor = "black" ;
      }
      else
      {
	if ($certainty == $UNCERTAIN) 
	{ 
	  $fillcolor = "pink" ;
	  $linecolor = "red" ;
	}
	else
	{
	  $fillcolor = "red" ;
	  $linecolor = "black" ;
	}
      }
      $fillcolor{$srcname} = $fillcolor ;
      $linecolor{$srcname} = $linecolor ;
      $nodes{$srcname}++ ;
      $srcdotname = makedotname ($srcname) ;
      ##################################################################
      # Used to count indents.  Not working for every case.  Try a     #
      # more direct approach.  If, for this node, we've already        #
      # encountered a particular link, we don't have to look at it     #
      # any more, so we stop.  Do this by seeing of a particular       #
      # trace has already been defined.                                #
      ##################################################################
      my $thetrace = "$srcdotname -> $dotname" ;
      $traces{$thetrace}++ ;
      if ($traces{$thetrace} < 2) 
      { 
        traceup ($indent."  ", $srcname) ; 
      }
      else
      {
        if ($traces{$thetrace} > 4) # should never happen
        {
          print STDERR "What the heck?  traceup traces > 4 $thetrace\n" ;
        }
      }
#       else
#       {
#         $logrecord = "  depth: $srcname -> $nodename" ;
#         if (!defined $logrecords{$logrecord})
#         {
#           print LOG "$logrecord\n" ;
#         }
#         $logrecords{$logrecord}++ ;  # increment in any case, might want it 
#         $nloops++ ;
#       }
    }
  }
}

sub tracedown
{
  my ($indent, $nodename) = @_ ;
  my ($noderef, $tgtlistref, $tgtref, $tgtname) ;
  my ($tgtdotname, $dotname) ;
  my ($tgtdatemodtype, $tgtdatemod) ;

  return if !defined $nodename ;
  $noderef = $noderefs{$nodename} ;
  $dotname = makedotname ($nodename) ;
  $tgtlistref = $noderef->[1] ;
  foreach $tgtref (@$tgtlistref)
  {
    $tgtname = $nameof{$tgtref} ;
    $tgtdatemodtype = $datemodtype{$tgtname} ;
    $tgtdatemod = $datemod{$tgtname} ;
    if (!defined $tgtdatemodtype)
    {
      print LOG 
          "$nodename points from $tgtname, which isn't defined - deleted?\n" ;
    }
    else
    {
      ##################################################################
      # for trace down, a target date < thisdate indicates that it's   #
      # assuredly out of date.  No matter what the ModuleBaseline vs   #
      # CreateModdate shows, because modulebaseline can only make it   #
      # yet earlier.  So pink vs. red doesn't really matter.           #
      # Howewver, if target date >= thisdate, modulebaseline makes     #
      # the goodness uncertain, so maybe a red band is what's needed.  #
      ##################################################################
      # lt - stringwise less than - indicates earlier than
      $timeliness = ($tgtdatemod lt $thisdatemod) ? $UNTIMELY : $TIMELY ;
      $certainty = ($tgtdatemodtype eq "ModuleBaseline") ? $UNCERTAIN : $CERTAIN ;
      if ($timeliness == $TIMELY)
      {
	$fillcolor = "lightblue" ;
	if ($certainty == $CERTAIN) { $linecolor = "black" ; }
	else                        { $linecolor = "red" ; }
      }
      else
      {
	$fillcolor = "red" ;
	$linecolor = "black" ;   # should we really differentiate anyway?
      }
      $fillcolor{$tgtname} = $fillcolor ;
      $linecolor{$tgtname} = $linecolor ;

      $nodes{$tgtname}++ ;
      $tgtdotname = makedotname ($tgtname) ;
      my $thetrace = "$dotname -> $tgtdotname" ;
      $traces{$thetrace}++ ;
      if ($traces{$thetrace} < 2) { tracedown ($indent."  ", $tgtname) ; }
      else
      {
        if ($traces{$thetrace} > 4) # should never happen
        {
          print STDERR "What the heck? tracedown traces > 4 $thetrace\n" ;
        }
      }
#       {
# 	$logrecord = "  depth: $nodename -> $tgtname" ;
# 	if (!defined $logrecords{$logrecord})
# 	{
# 	  print LOG "$logrecord\n" ;
# 	}
# 	$logrecords{$logrecord}++ ;  # increment in any case, might want it 
#         $nloops++ ;
#       }
    }
  }
}

########################################################################
# create a new node, if it doesn't already exist, in the noderefs      #
# hash                                                                 #
########################################################################
sub createnewnode
{
  my ($name) = @_ ;
  if (!defined $noderefs{$name})
  {
    $noderefs{$name} = [[],[]] ;  # intent: a reference to an array 
				  # containing references to two arrays: 
				  # the tolist and the fromlist 
    # Point back to the name from the reference
    $nameof{$noderefs{$name}} = $name ;
  }
  return $noderefs{$name} ;
}

########################################################################
# make the links src -> tgt, unless they already exist                 #
########################################################################
sub addtargetto # ($srcref, $tgtref)
{
  my ($srcref, $tgtref) = @_ ;
  my ($srctolistref, $tgtfromlistref) ;
  my ($foundit) ;
  my ($srcto, $tgtfrom) ;
  $srctolistref = $srcref->[0] ;
  $tgtfromlistref = $tgtref->[1] ;

  $foundit = 0 ;
  foreach $srcto (@$srctolistref)
  {
    if ($srcto == $tgtref) { $foundit = 1 ; last ; }
  }
  if (!$foundit) { $tocountlinks++ ; push @$srctolistref, $tgtref ; }

  $foundit = 0 ;
  foreach $tgtfrom (@$tgtfromlistref)
  {
    if ($tgtfrom == $srcref) { $foundit = 1 ; last ; }
  }
  if (!$foundit) { $fromcountlinks++ ; push @$tgtfromlistref, $srcref ; }
}

sub readlinks
{
  my ($lnkfilename) = @_ ;
  local (*LNKIN) ;
  my ($dateline, $datetype, $moddate) ;
  my ($inline) ;
  my (@inlines) ;
  my $debug ;

# $debug = $lnkfilename eq "ttr/SIM/2_PSE_Module/3834.lnks" ;
  open LNKIN, $lnkfilename 
      or die "Couldn't read $lnkfilename for reading: $!\n" ;
  $dateline = <LNKIN> ;
  chomp $dateline ;
  ($datetype, $moddate) = split /\t/, $dateline ;
  while ($inline = <LNKIN>) 
  { 
    chomp $inline ; 
    push @inlines, $inline ; 
  }
  return $datetype, $moddate, @inlines ;
}

sub getobjtxt
{
  my ($fname) = @_ ;
  my ($objtxt) ;
  my (@objtxt) ;
  local *OBJTXT ;

  open OBJTXT, "$fname"
      or die "Couldn't open objtxt file $fname for reading: $!\n" ;
  @objtxt = (<OBJTXT>) ;
  print $fname . "\t" . $#objtxt . "\n" if $#objtxt > 0 ;
  $objtxt = $objtxt[0] ;
  if (!defined $objtxt) { $objtxt = "" ; }
  $objtxt =~ s/\\/\\\\/g ;   # backslash-quote any backslashes
  close OBJTXT ;
  return $objtxt ;  # for now
}

sub getshrttxt
{
  my ($fname) = @_ ;
  my ($shrttxt) ;
  my (@shrttxt) ;
  local *SHRTTXT ;

  open SHRTTXT, "$fname"
      or die "Couldn't open objtxt file $fname for reading: $!\n" ;
  @shrttxt = (<SHRTTXT>) ;
  print $fname . "\t" . $#shrttxt . "\n" if $#shrttxt > 0 ;
  $shrttxt = $shrttxt[0] ;
  if (!defined $shrttxt) { $shrttxt = "" ; }
  $shrttxt =~ s/\\/\\\\/g ;   # backslash-quote any backslashes
  close SHRTTXT ;
  return $shrttxt ;  # for now
}

sub makenodelabel
{
  my ($nodename) = @_ ;
  my ($nodelabel) ;
  $nodelabel = $nodename ;
  $nodelabel =~ s/\/(\d+)$/:$1/ ;
  $nodelabel =~ s/^.*\/// ;
  return $nodelabel ;
}

sub makedotname
{
  my ($nodename) = @_ ;
  my ($dotname) ;
  $dotname = $nodename ;
  $dotname =~ s/[\/\-]/_/g ;
  # a dot name can't start with a number
  $dotname =~ s/^(\d)/L$1/ ;
  return $dotname ;
}

########################################################################
# return false if contents of xml file indicates object number less    #
# than 3 or object is an outline item or is a table element            #
########################################################################
sub isObjectToDo # ($xmlfilename) 
{
  my ($xmlfilename) = $xmlfilename ;
  local *XML ;
  open XML, $xmlfilename
      or die "Couldn't open $xmlfilename for reading: $!\n" ;
  while (<XML>)
  {
    # not quite structured but probably fastest
    if (/<ObjectNumber>(\d+)/)
    {
      $objnumber = $1 + 0 ;
      if ($objnumber < 3)   # skip out if not up to section 3
      {
        close XML ;
        return 0 ;
      }
    }
    if (/<is(Outline|Table)/)
    {
      close XML ;
      return 0 ;
    }
    # if it's outline or table element, mark true and quit
    # if it's ObjectText, quit (won't find isOutline or isTable after that
    last if (/<ObjectText/) ;
  }
  close XML ;
  return 1 ;
}

