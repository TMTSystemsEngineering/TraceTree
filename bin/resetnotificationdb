#! /usr/bin/perl
# License Terms
# 
# Copyright (c) 2006,2007,2008,2009,2010,2011,2012,2013, California 
# Institute of Technology ("Caltech").  U.S. Government sponsorship 
# acknowledged. 
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# 
# 
# *   Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# *   Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in the 
#     documentation and/or other materials provided with the distribution.
# 
# *   Neither the name of Caltech nor its operating division, the Jet 
#     Propulsion Laboratory, nor the names of its contributors may be used 
#     to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
########################################################################
#  xxx                                                                 #
########################################################################
use DB_File ;
use Digest::MD5 ;

require "fileutils.pl" ;
require "ttutils.pl" ;

$verbose = 0 ;

$projname = "" ;
while (@ARGV)
{
  $_ = shift ;
  if (/^-/)   # assume no project starts with '-'
  {
    $verbose++  if /^-v/ ;
  }
  else { $projname = $_ ; }
}

die "Usage:\n  $0 projectname\n" if $projname eq "" ;

$md5name = "LogsAndData/$projname.md5" ;
$notificationfilename = "LogsAndData/$projname.notifications.md5" ;
die "$0: $md5name doesn't exist, bye\n" if ! -e $md5name ;
print "Gonna use this file as source for checksums:\n" if $verbose ;
system "ls -l $md5name" if $verbose ;
print "Will use '$notificationfilename' as database for tracking need for notifications\n" if $verbose ;


tie %md5s, "DB_File", $md5name, O_RDONLY, 0666, $DB_HASH
    or die "Couldn't open '$md5name': $!\n" ;
$nkeys = scalar (keys %md5s) ;

print "There are $nkeys total files listed in $md5name\n" if $verbose ;

# Currently we only notify based on xmls and attrs and pngs
# Be sure to eliminate things that aren't requirements objects.  
# If they are, they'll start with filename \d+

foreach $obj (sort keys %md5s) 
{
  next unless $obj =~ /^(.*)\.(xml|attr|png)$/ ;
  $rootpath = $1 ; $ext = $2 ;
  next unless $rootpath =~ /\/\d+(-\d+)?$/ ;
  # warn "HUH? $obj\n" unless $rootpath=~/\d+$/ ;
  $totalcount++ ;
  push @rootpaths, $rootpath if $ext eq 'xml' ;  # only one xml per
}
print "found $totalcount\n" if $verbose ;
# print join("\n", @rootpaths) . "\n" ;
$objcount = scalar @rootpaths ;
########################################################################
# There's a tendency for entire modules that have been deleted to      #
# remain in the md5s database.  Shouldn't matter, as those wouldn't    #
# be updated, hence generate no notifications.  We'll see.             #
########################################################################

print "found $objcount objects\n" if $verbose ;
########################################################################
# Now we'll put into the notification checksum database all of the     #
# xmls, attrs, and pngs that have to do with any of the actual         #
# objects (some pngs don't).                                           #
########################################################################

# Now we can remove old and make new notification database
if (-e $notificationfilename)
{
  unlink $notificationfilename 
      or die "Couldn't unlink $notificationfilename: $!\n" ;
}
tie %notifymd5s, "DB_File", $notificationfilename,
    O_RDWR|O_CREAT, 0666, $DB_HASH
        or die "Cannot open notification db file '$notificationfilename': $!\n" ;

# DON'T REALLY HAVE TO GO THROUGH THIS TWICE IF WE'RE SMART...
foreach $obj (sort keys %md5s) 
{
  next unless $obj =~ /^(.*)\.(xml|attr|png)$/ ;
  $rootpath = $1 ; $ext = $2 ;
  next unless $rootpath=~/\d+$/ ;  # skip the non-object pngs
  $flagval = $md5s{$obj} ;
  $notifymd5s{$obj} = $flagval ;
}

untie %md5s ;
untie %notifymd5s ;
