#! /usr/bin/perl
# License Terms
# 
# Copyright (c) 2006,2007,2008,2009,2010,2011,2012,2013, California 
# Institute of Technology ("Caltech").  U.S. Government sponsorship 
# acknowledged. 
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# 
# 
# *   Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# *   Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in the 
#     documentation and/or other materials provided with the distribution.
# 
# *   Neither the name of Caltech nor its operating division, the Jet 
#     Propulsion Laboratory, nor the names of its contributors may be used 
#     to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
use XML::Simple;
require "fileutils.pl" ;

$rootpathname = "/Users/jgrimes/Desktop/VPCShare" ;
$rootdirname = "ttr" ;
if (@ARGV) { $pname = $ARGV[0] ; }
else { die "Usage:\n  xmakelists projectname\n" ; }
$rootdirname .= "/$pname" ;
print "xmakelists: doing $rootdirname\n" ;
$alldirlistname = "LogsAndData/$pname.alldirlist" ;
$seqdirlistname = "LogsAndData/$pname.seqdirlist" ;
$nodelistname = "LogsAndData/$pname.nodelist" ;
$emptylistname = "LogsAndData/$pname.emptylist" ;

@dirlist = getdirlistrecursivesimple ($rootdirname) ;
@dirlist = sort @dirlist ;
open ALLD, "> $alldirlistname" 
    or die "Couldn't open $alldirlistname for writing: $!\n" ;
open SEQD, "> $seqdirlistname" 
    or die "Couldn't open $seqdirlistname for writing: $!\n" ;
open NODES, "> $nodelistname" 
    or die "Couldn't open $nodelistname for writing: $!\n" ;
open EMPTY, "> $emptylistname" 
    or die "Couldn't open $emptylistname for writing: $!\n" ;

$nnodes = 0 ;
foreach $dirname (@dirlist)
{
  print ALLD "$dirname\n" ;
  $seqfilename = "$dirname/sequence.txt" ;
  if (-e $seqfilename)
  {
    print SEQD "$dirname\n" ;
    open SEQF, "$seqfilename"
        or die "Couldn't open $seqfilename for reading: $!\n" ;
    @nodelist = (<SEQF>) ;
    # more robust chomp because the sequence.txt file may not be Unix eol
    @nodelist = map { s/[\r\n]+$// ; $_ ;} @nodelist ;
    @nodelistzapped = grep /[0-9]/, @nodelist ;
    @nodelist = @nodelistzapped ;
    if (scalar (@nodelist) > 0 
        or ((scalar (@nodelist) == 1 and $nodelist[0] eq '')))
    {
      $nnodes += scalar @nodelist ;
      @nodelist = map { s/^/$dirname\// ; $_ ;} @nodelist ;
      print NODES join ("\n", @nodelist) . "\n" ;
    }
  }
  else
  {
    # could really do this with existing list of dirs, but wth
    @dirindirlist = getdirlist ($dirname) ;
    if (scalar @dirindirlist == 0) # then we have neither sequence.txt 
                                   # nor subdirectories 
    {
      print EMPTY "$dirname\n" ;
    }
  }

}
close ALLD ;
close SEQD ;
close NODES ;
close EMPTY ;
print "$0: Found $nnodes nodes\n" ;
