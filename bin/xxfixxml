#! /usr/bin/perl
# License Terms
# 
# Copyright (c) 2006,2007,2008,2009,2010,2011,2012,2013, California 
# Institute of Technology ("Caltech").  U.S. Government sponsorship 
# acknowledged. 
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# 
# 
# *   Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# *   Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in the 
#     documentation and/or other materials provided with the distribution.
# 
# *   Neither the name of Caltech nor its operating division, the Jet 
#     Propulsion Laboratory, nor the names of its contributors may be used 
#     to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
require "fileutils.pl" ;
require "ttutils.pl" ;

########################################################################
# need to check for characters from 0 to 31 - control characters, and  #
# eliminate them.                                                      #
########################################################################

# was: $rootdirname = "ttr" ;
$rootdirname = "ttrnew" ;
if (@ARGV) 
{ 
  $pname = $ARGV[0] ;
  $rootdirname = "$rootdirname/$pname" ; 
}
else { die "Usage:\n  xxfixxml projectname\n" ; } 
print STDERR "xxfixxml: doing $rootdirname\n" ;


# was @xmllist = getfilelistrecursive ($rootdirname, "\\.xml\$") ;
# and then was: 
#      @nodelist = getnodelist ($pname) ;
#      @xmllist = map { $_ . ".xml" ; } @nodelist ;
########################################################################
# Now we're going back to getfilelistrecursive because we're working   #
# in ttrnew, and there's no getnodelist for ttrnew                     #
########################################################################
@xmllist = getfilelistrecursive ($rootdirname, "\\.xml\$") ;
$nxml = scalar @xmllist ;

$count = 0 ;
foreach $xmlfilename (@xmllist)
{
  open IN, $xmlfilename or die "Couldn't open $xmlfilename for reading: $!\n" ;
  @inlines = (<IN>) ;
  chomp @inlines ;
  close IN ;
  $changedsomething = 0 ;
  if ($inlines[0] =~ /^<\?xml/)
  {
    for ($i = 0 ; $i < scalar (@inlines) ; $i++)
    {
      $inline = $inlines[$i] ;
      $inlinesave = $inline ;
      ##################################################################
      # First check for everything but tab from 0 to 31 (37 octal),    #
      # plus the escape character, and just get rid of it.  If         #
      # there's a change, record that the file has to be changed.      #
      ##################################################################
      if ($inline =~ s/[\001-\010\012-\037\e]//g)
      {
        $changedsomething++ ;
        $inlines[$i] = $inline ;
      }
      ##################################################################
      # Now just look for unknown characters and log them.  Next       #
      # could put <UnknownChar in the output...                        #
      ##################################################################
      if ($inline =~ /<UnknownChar>/)
      {
        print "$xmlfilename, line #$i: '$inline'\n" ;
	$inline =~ s/<UnknownChar>/&amp;lt;UnknownChar&amp;gt;/g ;
	$inline =~ s/<\/UnknownChar>/&amp;lt;\/UnknownChar&amp;gt;/g ;
	$changedsomething++ ;
	$inlines[$i] = $inline ;
      }
    }

    if ($changedsomething)
    {
      print "rewriting $xmlfilename\n" ;
      open OUT, "> $xmlfilename" 
	  or die "Couldn't open $xmlfilename for writing: $!\n" ;
      print OUT join ("\n", @inlines) . "\n" ;
      close OUT ;
    }
  }
  else
  {
    warn "Something's weird about line 0 of $xmlfilename: $inlines[0]\n" ;
  }
  $count++ ;
  if ($count % 100 == 0) { print STDERR "Done with $count of $nxml files\r" ; }
}
print STDERR "Done with $count of $nxml files\n" ;

