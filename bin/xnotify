#! /usr/bin/perl
# License Terms
# 
# Copyright (c) 2006,2007,2008,2009,2010,2011,2012,2013, California 
# Institute of Technology ("Caltech").  U.S. Government sponsorship 
# acknowledged. 
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# 
# 
# *   Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# *   Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in the 
#     documentation and/or other materials provided with the distribution.
# 
# *   Neither the name of Caltech nor its operating division, the Jet 
#     Propulsion Laboratory, nor the names of its contributors may be used 
#     to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
use DB_File ;
use Digest::MD5 ;

require "fileutils.pl" ;
require "ttutils.pl" ;

$now = time() ;
# For now, we have a simple hash of project vs email list
%emailof = (
  'TMT_Requirements' => 'jamie@tmt.org,james.m.grimes@jpl.nasa.gov,sroberts@tmt.org,mitchell.troy@jpl.nasa.gov,Frank.G.Dekens@jpl.nasa.gov,michael.evans@jpl.nasa.gov,gtrancho@tmt.org,khardie@tmt.org,acueto@tmt.org,hthompson@tmt.org,nhan@tmt.org,jrogers@tmt.org',
) ;
%emailof = (
  'TMT_Requirements' => 'james.m.grimes@jpl.nasa.gov,gtrancho@tmt.org,khardie@tmt.org',
  # 'TMT_Requirements' => 'james.m.grimes@jpl.nasa.gov',
) ;

$N_MOD = 1 ;
$N_GMOD = 2 ;
$N_DEL = 4 ;
$N_NEW = 8 ;

$verbose = 0 ;
$testonly = 0 ;

$projname = "" ;
while (@ARGV)
{
  $_ = shift ;
  if (/^-h/)
  {
    print "Usage:\n  $0 [-d] [-t] [-v] [-f] [-nomail] projname\n" ;
    exit 0 ;
  }
  if (/^-/)   # assume no project starts with '-'
  {
    $debug++    if /^-d/ ;
    $testonly++ if /^-t/ ;
    $verbose++  if /^-v/ ;
    $doforce++  if /^-f/ ;
    $nomail++   if /^-nomail/ ;
  }
  else { $projname = $_ ; }
}

die "Usage:\n  $0 projectname\n" if $projname eq "" ;

print "WILL RUN TEST ONLY for $projname\n" if $testonly ;
print "WILL RUN regardless of time of last update\n" 
    if $doforce ;

# for html version

foreach $p (sort keys %emailof)
{
  print "$p : $emailof{$p}\n" if $verbose ;
}
# EXIT IF we're not supporting this project
unless (exists $emailof{$projname})
{
  print "$0: $projname not defined in notification list, exiting\n" ;
  exit 0 ;
}

$md5name = "LogsAndData/$projname.md5" ;
$newage = -M $md5name ;
$notifydb = "LogsAndData/$projname.notifications.md5" ;
die "$0: $md5name doesn't exist, bye\n" if ! -e $md5name ;
# die "$0: $notifydb doesn't exist, bye\n" if ! -e $notifydb ;
if (! -e $notifydb)
{
  print "Need to make (or remake) notification db\n" ;
  $isnewdb = 1 ;
  system "resetnotificationdb -v $projname" if $verbose ;
  system "resetnotificationdb $projname" unless $verbose ;
}

if ($verbose)
{
  print "Gonna use this file as source for checksums:\n" ;
  system "ls -l $md5name" ;
  print "Will use '$notifydb' for tracking notifications dates.\n" ;
}

$newage = -M $md5name ;
$oldage = -M $notifydb ;
print "newage ('$md5name')=$newage oldage(notifications.md5)=$oldage\n" if $debug ;
$newage *= 3600*24 ;
$oldage *= 3600*24 ;
$newdate = $now-$newage ;
$olddate = $now-$oldage ;
print "now=$now newage=$newage newdate=$newdate oldage=$oldage olddate=$olddate\n" ;
($osec,$omin,$ohour,$omday,$omon,$oyear,$owday,$oyday,$oisdst) =
    localtime ($olddate) ;
($nsec,$nmin,$nhour,$nmday,$nmon,$nyear,$nwday,$nyday,$nisdst) =
    localtime ($newdate) ;
$omon++ ; $nmon++ ;  # starts with offset 0
$oyear+=1900 unless $oyear > 1900 ;  # some systems return offset from 1900
$nyear+=1900 unless $nyear > 1900 ;  # some systems return offset from 1900
$olddatestr = sprintf ("%4d-%02d-%02d %02d:%02d:%02d", 
               $oyear, $omon, $omday, $ohour, $omin, $osec) ;
$newdatestr = sprintf ("%4d-%02d-%02d %02d:%02d:%02d", 
               $nyear, $nmon, $nmday, $nhour, $nmin, $osec) ;


########################################################################
# Because of vagaries of updates, if we run dumpprojects and           #
# xdosome/xnotify more than once per day, we can get multiple reports  #
# of the same changes.  So we'll only report once per day, at an       #
# arbitrary time.  If the last report was less than 23 hours ago,      #
# skip this report.  This could happen at any time of day, depending   #
# on when the previous set of changes first occurred.                  #
########################################################################
# $doforce will cause xnotify to run regardless of last update time
unless ($doforce)
{
  if ($oldage < 3600*23)
  {
    print "xnotify: previous report was at $olddatestr" 
	   . ", less than 23 hours ago.  Bye.\n" ;
    exit 0 ;
  }
}

tie %newmd5s, "DB_File", $md5name, O_RDONLY, 0666, $DB_HASH
    or die "Couldn't open '$md5name': $!\n" ;
$nnewkeys = scalar (keys %newmd5s) ;
print "There are $nnewkeys total files listed in $md5name\n" if $verbose ;

if ($testonly)
{
  tie %oldmd5s, "DB_File", $notifydb,
      O_RDONLY, 0666, $DB_HASH
	  or die "Cannot open notification db file '$notifydb': $!\n" ;
}
else
{
  tie %oldmd5s, "DB_File", $notifydb,
      O_RDWR|O_CREAT, 0666, $DB_HASH
	  or die "Cannot open notification db file '$notifydb': $!\n" ;
}
$noldkeys = scalar (keys %oldmd5s) ;
print "There are $noldkeys total files listed in $notifydb\n" if $verbose ;

########################################################################
# OK, we have open both oldmd5s, which contains only notify targets,   #
# and newmd5s, which has all files.                                    #
########################################################################
# Currently we only notify based on xmls and attrs and pngs
# We assume attr exists, because other scripts would err out if not.
# Steps:
# 1) look in old for xml and see if it's in new.  If not mark DELETED.
# 2) look in new for xml and see if it's in old.  If not mark NEW.
# 3) look in new for anything that qualifies and not already not marked 
#    NEW (combine with previous step, no? 
#      if xml changed or attr changed mark MODIFIED. If pngs changed 
#      mark GRAPHICS_MODIFIED. (pngs missing or added would result in 
#      xml change, so would be MODIFIED) 

%status = () ;
foreach $oldobj (sort keys %oldmd5s)
{
print "old $oldobj\n" if $debug ;
  next unless $oldobj =~ /xml$/ ;
  markDeleted ($oldobj) unless exists $newmd5s{$oldobj} ;
}

foreach $newobj (sort keys %newmd5s) 
{
  # skip non- xml,attr,png files
  next unless $newobj =~ /(xml|attr|png)$/ ;
  $ext = $1 ;
  # skip png files with no number - these are not objects
print "before filter, newobj = $newobj\n" if $debug ;
  next if ($ext eq 'png') and ($newobj !~ /\/\d+-\d+\.png$/) ;
print "after filter,  newobj = $newobj\n" if $debug ;
  if ($newobj =~ /xml$/)
  {
# print "  is xml\n" if $debug ;
    if (exists $oldmd5s{$newobj})
    {
print "   both exist, old = $oldmd5s{$newobj} new = $newmd5s{$newobj}\n" if $debug ;
print "    IS NOT A MATCH\n" if ($debug and !match($oldmd5s{$newobj}, $newmd5s{$newobj})) ;
      markMod ($newobj) unless match($oldmd5s{$newobj}, $newmd5s{$newobj}) ;
    }
    else 
    { 
      markNew ($newobj) ; 
    }
  }
  elsif ($newobj =~ /attr$/)
  {
# print "  is attr\n" if $debug ;
    if (exists $oldmd5s{$newobj})
    {
print "   both exist, old = $oldmd5s{$newobj} new = $newmd5s{$newobj}\n" if $debug ;
print "    IS NOT A MATCH\n" if ($debug and !match($oldmd5s{$newobj}, $newmd5s{$newobj})) ;
      markMod ($newobj) unless match($oldmd5s{$newobj}, $newmd5s{$newobj}) ;
    }
  }
  elsif ($newobj =~ /\d+\.png$/)
  {
    if (exists $oldmd5s{$newobj})
    {
      markGMod ($newobj) unless match ($oldmd5s{$newobj}, $newmd5s{$newobj}) ;
    }
  }
}

# $subject = "Subject: dev2 Automatic Change Notification for DOORS project $projname DEV VERSION" ;
$subject = "Subject: Automatic Change Notification for DOORS project $projname" ;
$replyto = "Reply-to: james.m.grimes\@jpl.nasa.gov" ;
$ccto    = "Cc: james.m.grimes\@jpl.nasa.gov" ;
$sendto  = "To: $emailof{$projname}" ;
$from    = "From: ReportWizard_NoEmailHere" ;

$mailfilename = "LogsAndData/$projname.notification.out" ;  
open S, "> $mailfilename"
    or die "Couldn't open $mailfilename for writing: $!\n" ;
print S "$subject\n" ;
print S "$sendto\n" ;
print S "$ccto\n" ;
print S "$replyto\n";
print S "$from\n" ;
print S "Content-type: text/plain\n\n";

if ($isnewdb)
{
  print S "Notification database for $projname has been reset.\n" ;
  print S "No changes can be reported\n" ;
  $changecount = 0 ;
}
else
{
  print S "HERE's WHAT CHANGED for project '$projname'\n" ;
  print S <<EOEMAILNOTE;
  Note: project update still running while this mail being sent. It may 
        be 30 minutes or more before updates reach website.
  Also: this notification email will be made at most once per day. 
        Further notifications will not be made until tomorrow, even if 
        changes occur.

EOEMAILNOTE
  $changecount = 0 ;
  foreach $root (sort keys %status)
  {
    ($mod = $root) =~ s/ttr\/$projname\/// ;
    $mod =~ /^(.*)\/(\d+)$/ ;
    $mod = $1 ; $absno = $2 ;
    $statusstring = statfromnstat($status{$root}) ;
    printf S "%s\t% 5d\t%s\n", $mod, $absno, $statusstring ;

    if (defined $absnosOf{$mod}{$statusstring})
	 { $absnosOf{$mod}{$statusstring} .= ",$absno" ; }
    else { $absnosOf{$mod}{$statusstring}  = "$absno"  ; }
    $changecount++ ;
  }
}
close S ;
if ($testonly)
{
  print "Doing test only, here's the output location of the output: \n" ;
  print "    $mailfilename\n" ;
  print "changecount is $changecount\n" ;
}
else
{
  if ($changecount)
  {
    print "There were $changecount detected changes for $projname.\n" ;
    if ($nomail)
    {
      print "  -nomail was specified.  Would have sent '$mailfilename'\n" ;
    }
    else
    {
      print "  Sending '$mailfilename'\n" ;
      $cmd = "sendmail -t < $mailfilename" ;
      # $cmd = "/usr/sbin/sendmail -t < $mailfilename" ;
      $result = system $cmd ;
      if ($result)
      {   
	printf "Caught error: %0x\n", $result ;
	$! = $result >> 8 ;
	$sig = $result & 0xFF ;
	die "Died with signal $sig, error $!\n"  if $sig ;
	die "Died with error $!\n" ;
      }
      else
      {
	print "Sendmail result: OK\n" ;
      }
    }
  }
  else
  {
    print "Didn't send anything; there were no changes\n" ;
  }
}

untie %newmd5s ;
untie %oldmd5s ;

# Make an html presentation, using a table
$htmlfilename = "LogsAndData/${projname}_mods.html" ;
print "Opening $htmlfilename for writing\n" ;
open H, "> $htmlfilename" 
    or die "Couldn't open $htmlfilename for writing: $!\n" ;
$hhdr = htmlheader ("Changes for $projname") ; # need some dates
print H $hhdr ;
if ($isnewdb)
{
  print H "<h3>Notification database for project $projname was reset - no changes can be reported</h3>\n" ;

}
else
{
  print H "<h2>Changes for <strong>$projname</strong> from <strong>$olddatestr</strong> to <strong>$newdatestr</strong></h2>\n" ; 
  print H "<table border=\"1\" cellpadding=\"3\">\n" ;
  print H "  <tr><th>" . 
    join ("</th><th>", "Module Name", "New", "Modified", "Graphic-modified", "Deleted") .
    "</th></tr>\n" ;
  foreach $mod (sort keys %absnosOf)
  {
    @linestrings = ($mod) ;
    foreach $statusstring ("New", "Modified", "Graphic-modified", "Deleted")
    {
      if (defined $absnosOf{$mod}{$statusstring})
      {
	$absnos = $absnosOf{$mod}{$statusstring} ;
	$absnos =~ s/,/, /g ; # add a space so browser can wrap lines
	push @linestrings, $absnos ;
      }
      else
      {
	push @linestrings, "&nbsp;" ;
      }
    }
    print H"  <tr>\n    <td>" .
	join ("</td>\n    <td>", @linestrings) .
	"</td>\n  </tr>\n" ;
  }
  print H "</table\n" ;
  if ($changecount == 0)
  {
    print H "<h3>No changes found</h3>\n" ;
  }
} 
print H "</body></html>\n" ;
close H ;

$htmllocation = "ttr/$projname/${projname}_mods.html" ;
$htmlfilename = "LogsAndData/${projname}_mods.html" ;
unless ($testonly)
{
  if (-e $htmllocation)
  {
    unlink $htmllocation 
	or die "Couldn't delete old html file '$htmllocation'\n" ;
  }
  rename $htmlfilename, $htmllocation
      or die "Couldn't move '$htmlfilename' to '$htmllocation'\n" ;
}
# OK, we're done, now reset the notification database
unless ($testonly)
{
  system "resetnotificationdb -v $projname" if $verbose ;
  system "resetnotificationdb $projname" unless $verbose ;
}
# oughta look at result ...

sub statfromnstat # (or'd status number)
{
  my ($nstat) = @_ ;
  my $str = "" ;
  # $N_MOD, $N_GMOD, $N_DEL, $N_NEW
  $str .= "Modified " if $nstat & $N_MOD ;
  $str .= "Graphic-modified " if $nstat & $N_GMOD ;
  $str .= "Deleted " if $nstat & $N_DEL ;
  $str .= "New " if $nstat & $N_NEW ;
  # oughta check for impossible values...
  $str =~ s/ $// ;
  return $str ;
}

sub match # (oldflagmd5, newflagmd5)
{
  my ($oldflagmd5, $newflagmd5) = @_ ;
  return (getmd5digest($oldflagmd5) eq getmd5digest ($newflagmd5)) ;
}

sub markMod # ($objstring)
{
  my ($obj) = @_ ;
  mark ($obj, $N_MOD) ;
}

sub markGMod # ($objstring)
{
  my ($obj) = @_ ;
  mark ($obj, $N_GMOD) ;
}

sub markDeleted # ($objstring)
{
  my ($obj) = @_ ;
  mark ($obj, $N_DEL) ;
}

sub markNew # ($objstring)
{
  my ($obj) = @_ ;
  mark ($obj, $N_NEW) ;
}

sub mark # ($objstring, $status)
{
  my ($obj, $status) = @_ ;
  my $root = getroot ($obj) ;
  if (defined ($status{$root})) { $status{$root} = $status ; }
  else                          { $status{$root} |= $status ; }
}

sub getroot # ($objstring) 
{
  my ($obj) = @_ ;
  if ($obj !~ /^(.*)\.(\w+)$/)
  {
    die "Uh OH, getroot: obj '$obj' doesn't conform\n" ;
  }
  my $root = $1 ;
  my $ext = $2 ;
  if ($ext eq 'png')
  {
    if ($root !~ /^(.*)-(\d+)$/)
    {
      die "UH OH, getroot: png obj 'obj' doesn't confrom\n" ;
    }
    $root = $1 ;
  }
  return $root ;
}


